"""Streamlit web application for TrustLink AI job scam detection."""

import streamlit as st
import joblib
import os
from model_utils import (
    preprocess_text, get_heuristic_analysis, get_model_explanation,
    calculate_final_score, get_risk_label, get_recommendation
)

# Page configuration
st.set_page_config(
    page_title="TrustLink AI",
    page_icon="üîç",
    layout="wide"
)

@st.cache_resource
def load_model_artifacts():
    """Load trained model and vectorizer."""
    try:
        model = joblib.load('models/model.pkl')
        vectorizer = joblib.load('models/vectorizer.pkl')
        return model, vectorizer, True
    except FileNotFoundError:
        return None, None, False

def analyze_posting(text, url, model, vectorizer):
    """Analyze job posting and return comprehensive results."""
    # Preprocess text
    processed_text = preprocess_text(text)
    
    # Get model prediction
    text_tfidf = vectorizer.transform([processed_text])
    model_proba = model.predict_proba(text_tfidf)[0]
    scam_probability = model_proba[1]  # Probability of being a scam
    
    # Get heuristic analysis
    heuristic_result = get_heuristic_analysis(text, url)
    heuristic_score = heuristic_result["score"]
    heuristic_reasons = heuristic_result["reasons"]
    
    # Calculate final score
    final_score = calculate_final_score(scam_probability, heuristic_score)
    risk_label = get_risk_label(final_score)
    recommendation = get_recommendation(final_score)
    
    # Get model explanation
    top_words = get_model_explanation(text, model, vectorizer)
    
    return {
        "final_score": final_score,
        "risk_label": risk_label,
        "recommendation": recommendation,
        "model_probability": scam_probability,
        "heuristic_score": heuristic_score,
        "heuristic_reasons": heuristic_reasons,
        "top_words": top_words
    }

def generate_report(text, url, results):
    """Generate downloadable text report."""
    report = f"""TrustLink AI - Job Posting Analysis Report
{'='*50}

POSTING ANALYSIS
Final Risk Score: {results['final_score']}/100
Risk Level: {results['risk_label']}

RECOMMENDATION:
{results['recommendation']}

DETAILED ANALYSIS:
- Model Probability: {results['model_probability']:.3f}
- Heuristic Score: {results['heuristic_score']:.3f}

TRIGGERED ALERTS:
"""
    
    if results['heuristic_reasons']:
        for reason in results['heuristic_reasons']:
            report += f"- {reason}\n"
    else:
        report += "- No suspicious patterns detected\n"
    
    report += f"\nTOP CONTRIBUTING WORDS:\n"
    if results['top_words']:
        for word, score in results['top_words']:
            report += f"- {word}: {score:.3f}\n"
    else:
        report += "- None available\n"
    
    report += f"\n\nSOURCE:\nPosting Text: {text[:200]}{'...' if len(text) > 200 else ''}\n"
    if url:
        report += f"Source URL: {url}\n"
    
    report += f"\n\nGenerated by TrustLink AI\nProtecting job seekers from scam postings"
    
    return report

def main():
    """Main Streamlit application."""
    # Header
    st.title("üîç TrustLink AI")
    st.subheader("AI-Powered Job Scam Detection")
    st.markdown("*Protecting job seekers from fraudulent postings*")
    
    # Load model
    model, vectorizer, model_loaded = load_model_artifacts()
    
    if not model_loaded:
        st.error("‚ùå **Model not found!** Please run `python src/train.py` first to train the model.")
        st.stop()
    
    # Create columns for layout
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üìù Input")
        
        # Text input
        posting_text = st.text_area(
            "Job Posting Text *",
            height=200,
            placeholder="Paste the job posting text here...",
            help="Enter the complete job posting description"
        )
        
        # URL input (optional)
        source_url = st.text_input(
            "Source URL (Optional)",
            placeholder="https://example.com/job-posting",
            help="Enter the URL where you found this posting"
        )
        
        # Analyze button
        analyze_button = st.button("üîç Assess Posting", type="primary", use_container_width=True)
    
    with col2:
        st.markdown("### üìä Analysis Results")
        
        if analyze_button and posting_text.strip():
            with st.spinner("Analyzing posting..."):
                results = analyze_posting(posting_text, source_url, model, vectorizer)
            
            # Display results
            score = results["final_score"]
            label = results["risk_label"]
            
            # Score display with color coding
            if score <= 39:
                st.success(f"**Risk Score: {score}/100**")
                st.success(f"**Classification: {label}**")
            elif score <= 69:
                st.warning(f"**Risk Score: {score}/100**")
                st.warning(f"**Classification: {label}**")
            else:
                st.error(f"**Risk Score: {score}/100**")
                st.error(f"**Classification: {label}**")
            
            # Recommendation
            st.markdown("**Recommendation:**")
            st.info(results["recommendation"])
            
            # Technical details in expander
            with st.expander("üîç Technical Details"):
                col_a, col_b = st.columns(2)
                
                with col_a:
                    st.metric("Model Probability", f"{results['model_probability']:.3f}")
                
                with col_b:
                    st.metric("Heuristic Score", f"{results['heuristic_score']:.3f}")
                
                # Triggered alerts
                if results["heuristic_reasons"]:
                    st.markdown("**üö® Triggered Alerts:**")
                    for reason in results["heuristic_reasons"]:
                        st.markdown(f"‚Ä¢ {reason}")
                else:
                    st.markdown("**‚úÖ No suspicious patterns detected**")
                
                # Top contributing words
                if results["top_words"]:
                    st.markdown("**üìù Top Contributing Words:**")
                    for word, contribution in results["top_words"]:
                        st.markdown(f"‚Ä¢ **{word}**: {contribution:.3f}")
            
            # Download report button
            report = generate_report(posting_text, source_url, results)
            st.download_button(
                label="üìÑ Download Report",
                data=report,
                file_name=f"trustlink_analysis_{results['final_score']}.txt",
                mime="text/plain",
                use_container_width=True
            )
        
        elif analyze_button:
            st.warning("Please enter a job posting text to analyze.")
        
        else:
            st.info("üëÜ Enter a job posting above and click 'Assess Posting' to analyze it.")
    
    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: gray;'>
        <p>TrustLink AI combines machine learning with rule-based analysis to detect suspicious job postings.<br>
        Always verify job opportunities through official company channels.</p>
        </div>
        """, 
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()